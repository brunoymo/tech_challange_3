import streamlit as st
import requests
import time

# --- Configura√ß√£o da P√°gina ---
st.set_page_config(
    page_title="Sistema de Recomenda√ß√£o",
    page_icon="üå§Ô∏è",
    layout="centered"
)

# --- T√≠tulo e Descri√ß√£o ---
st.title("üëï Sistema de Recomenda√ß√£o de Produtos com Base no Clima")
st.write(
    "Este dashboard mostra o clima atual em tempo real e sugere produtos adequados para as condi√ß√µes."
)

# --- Comunica√ß√£o com a API ---
API_URL = "http://localhost:5000/recommendation"

def get_data_from_api():
    """Busca dados da nossa API Flask."""
    try:
        response = requests.get(API_URL)
        response.raise_for_status()  # Lan√ßa um erro se a resposta n√£o for 200 (OK)
        return response.json()
    except requests.exceptions.RequestException as e:
        st.error(f"N√£o foi poss√≠vel conectar √† API. Verifique se o servidor `api.py` est√° rodando. Erro: {e}")
        return None

# --- Layout do Dashboard ---
# Usamos um placeholder para poder atualizar o conte√∫do sem recarregar a p√°gina inteira
placeholder = st.empty()

# --- Loop de Atualiza√ß√£o Autom√°tica ---
while True:
    data = get_data_from_api()
    
    # Usa o container do placeholder para reescrever o conte√∫do
    with placeholder.container():
        if data:
            weather_info = data.get('latest_weather_data', {})
            recommendation = data.get('recommendation', 'Nenhuma recomenda√ß√£o dispon√≠vel.')
            
            st.header(f"Clima atual em: {weather_info.get('city', 'N/A')}")
            
            # Divide a tela em 2 colunas para melhor visualiza√ß√£o
            col1, col2 = st.columns(2)
            with col1:
                st.metric("üå°Ô∏è Temperatura", f"{weather_info.get('temperature_celsius', 0):.1f} ¬∞C")
            with col2:
                st.metric("üå¶Ô∏è Condi√ß√£o", f"{weather_info.get('weather_condition', 'N/A').capitalize()}")

            st.success(f"üí° **Recomenda√ß√£o:** {recommendation}")
            
            st.info(f"Dados atualizados em: {weather_info.get('timestamp', 'N/A')}")
        else:
            st.warning("Aguardando dados da API...")
            
    # Define o intervalo de atualiza√ß√£o em segundos
    time.sleep(10)